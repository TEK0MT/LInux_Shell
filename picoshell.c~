#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>
#include <string.h>

#define BUFF_SIZE 40000
#define MAX_ARGS 9999
extern char **environ;
int main(int argc, char *argv[])
{
    char buf[BUFF_SIZE];
    int last_status = 0;

    while (1) {
	printf("Your only friend is here ;) > ");
	fflush(stdout);


	if (fgets(buf, BUFF_SIZE, stdin) == NULL) {
	    break;
	}


	size_t len = strlen(buf);
	if (len > 0 && buf[len - 1] == '\n') {
	    buf[len - 1] = '\0';
	}

	if (buf[0] == '\0') {
	    continue;
	}
	if (strcmp(buf, "exit") == 0) {
	    printf("Good Bye\n");
	    break;
	}

	char *args[MAX_ARGS];
	int i = 0;
	args[i] = strtok(buf, " ");
	while (args[i] != NULL && i < MAX_ARGS - 1) {
	    i++;
	    args[i] = strtok(NULL, " ");
	}
	args[i] = NULL;
	if (strcmp(args[0], "cd") == 0) {
	    if (args[1] == NULL || (last_status = chdir(args[1])) == -1)
		printf("cd: %s: No such file or directory\n", args[1]);
	    //exit(0);
	    continue;
	} else if (strchr(args[0], '=') != NULL) {
	    char *pos = strchr(args[0], '=');
	    *pos = '\0';
	    char *sympol = args[0];
	    char *val = pos + 1;
	    if (setenv(sympol, val, 1) != 0) {
		exit(-1);
	    }
	    continue;
	}

	pid_t pid = fork();
	if (pid < 0) {
	    last_status = 1;
	    continue;
	}

	if (pid == 0) {

	    execvpe(args[0], args,environ);
	    printf("%s: command not found\n", args[0]);
	    exit(-1);


	    exit(1);
	} else {

	    int status;
	    waitpid(pid, &status, 0);
	    if (WIFEXITED(status))
		last_status = WEXITSTATUS(status);
	    else
		last_status = 1;
	}
    }

    return last_status;
}
